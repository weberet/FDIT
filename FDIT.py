
## TKINTER IMPORTS PYTHON 3 ##
import tkinter as tk                # python 3
from tkinter import font  as tkfont # python 3
from tkinter import * #For sticky=NSEW
import tkinter.scrolledtext as tkst

#TKINTER IMPORTS PYTHON 2
#import Tkinter as tk     # python 2
#from Tkinter import *    # python 2
#import ScrolledText as tkst #python 2
#import tkFont as tkfont  # python 2

import math
import functools
import FDITSaveMan
import FDITsqlman #Manages sqlite connection and events

debugging = True
numbuttons = FDITSaveMan.getnumbuttons() #Only supports up to 8 currently
fditbuttonactlist = FDITSaveMan.getbuttonactionlist()

##Used to provide buttons with more than 1 command
def combine_funcs(*funcs):
    def combined_func(*args, **kwargs):
        for f in funcs:
            f(*args, **kwargs)
    return combined_func

def FDITFeedFocusAction(controller):  # Action which happens when FDITFeed gets focus
    controller.show_frame("StartPage")
    controller.focus()

class FDIT(tk.Tk):

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        self.title_font = tkfont.Font(family='Helvetica', size=18, weight="bold", slant="italic")

        # the container is where we'll stack a bunch of frames
        # on top of each other, then the one we want visible
        # will be raised above the others
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        for F in (StartPage, FDITMain, Settings):
            page_name = F.__name__
            frame = F(parent=container, controller=self)
            self.frames[page_name] = frame

            # put all of the pages in the same location;
            # the one on the top of the stacking order
            # will be the one that is visible.
            frame.grid(row=0, column=0, sticky="nsew")


        self.show_frame("StartPage")

    def show_frame(self, page_name):
        '''Show a frame for the given page name'''
        frame = self.frames[page_name]
        frame.tkraise()


class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        ##Configure Frame
        self.grid(row=0, column=0)
        self.columnconfigure(0, weight=1)
        self.columnconfigure(1, weight=1)
        self.rowconfigure(0, weight=1)
        self.rowconfigure(1, weight=1)

        #label = tk.Label(self, text="FDIT", font=controller.title_font)
        #label.grid(row=1,  columnspan=2)

        button1 = tk.Button(self, text="Settings",
                            command=lambda: controller.show_frame("Settings"))
        button2 = tk.Button(self, text="FDIT",
                            command=lambda: controller.show_frame("FDITMain"))
        button1.grid(row=0, column=0, rowspan=2, sticky=N+S+E+W)
        button2.grid(row=0, column=1, rowspan=2, sticky=N+S+E+W)


class FDITMain(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        ##Configure Frame
        self.grid(row=0, column=0)
        self.rowconfigure(0, weight=1)
        self.rowconfigure(1, weight=1)

        #Dynamically determine number of columns needed:
        numcolumns = math.ceil(numbuttons/2)+1

        # configure appropriate amount of columns based on button, all with weight 1
        for i in range(0,int(numcolumns)):
            if i != numcolumns: #Not the textbox column, configure normally
                self.columnconfigure(i, weight=1)
            else: #textboxcolumn, reduce weight
                self.columnconfigure(i, weight=numcolumns-1)

        #Text Feed
        FditFeed = tkst.ScrolledText(self, wrap=tk.WORD, width=25, height=10)
        FditFeed.grid(row=0,column=numcolumns-1,rowspan=2,sticky=N+E+S+W)
        FditFeed.bind("<FocusIn>", lambda _: FDITFeedFocusAction(self.controller)) #Binds show_frame action to when this widget receives focus.

        #Autogenerated Buttons
        for i in range(0,numbuttons):
            mybuttontext = str(fditbuttonactlist[i])
            # Gives auto-generated buttons 2 actions to submit sql insert statements and update feed. Utilizes method "combine_funcs(method,method)" to pass two methods as actions to the buttons. (defined above.)
            #button = tk.Button(self, text=mybuttontext, width=10, height=10, command=combine_funcs(lambda boundmybuttontext = mybuttontext: FDITsqlman.insertNewEntry(boundmybuttontext), lambda: FDITsqlman.updateTextFeed(FditFeed))) #Submit Record & Update feed actions
            button = tk.Button(self, text=mybuttontext, width=10, height=10, command=combine_funcs(lambda boundmybuttontext = mybuttontext: FDITsqlman.insertNewEntryUpdateFeed(boundmybuttontext,FditFeed))) #Submit Record & Update feed actions

           #Determine placement column of button dynamically
            if i < numcolumns-1:
                button.grid(row=0, column=i, sticky=N+E+S+W)
            else:
                button.grid(row=1,column=i-(numcolumns-1), sticky=N+E+S+W)

        FDITsqlman.updateTextFeed(FditFeed) #Update Feed Widget with SQL text



class Settings(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="Settings", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)
        cleardatabutton = tk.Button(self, text="Clear Data",
                           command=lambda: FDITsqlman.deleteDefaultFDITtable())
        cleardatabutton.pack()
        button = tk.Button(self, text="Return",
                           command=lambda: controller.show_frame("StartPage"))
        button.pack()


if __name__ == "__main__":
    app = FDIT()
    # Set full screen per frame or not based on debugging mode:
    if (debugging):
        pass
    else:
        #Get screen dimensions
        screen_width = app.winfo_screenwidth()
        screen_height = app.winfo_screenheight()
        #Set window to screen dimensions
        app.geometry(str(screen_width) + 'x' + str(screen_height))
        app.overrideredirect(1)

    app.mainloop()